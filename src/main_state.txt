
#include <LoRa.h>
#include "boards.h"

// Define the message to send
#define MESSAGE "PING %d %d"

char message[1024];

// Define the iteration number
int iteration = 0;

// Define the random board ID
int randomBoardId = random(100000, 999999);

enum class State
{
  INIT,
  WAITING,
  RECEIVING,
  SENDING
};

State state = State::INIT;

char *getStateName(State state)
{
  switch (state)
  {
  case State::INIT:
    return "INIT";
  case State::WAITING:
    return "WAITING";
  case State::RECEIVING:
    return "RECEIVING";
  case State::SENDING:
    return "SENDING";
  default:
    return "UNKNOWN";
  }
}

void onReceive(int packetSize)
{
  String received = "";

  while (LoRa.available())
  {
    received += (char)LoRa.read();
  }

  Serial.print("Received: ");
  Serial.println(received);

  Serial.print("RSSI: ");
  Serial.println(LoRa.packetRssi());
}

void setup()
{
  initBoard();
  // When the power is turned on, a delay is required.
  delay(1500);

  Serial.println("LoRa Receiver");

  LoRa.setPins(RADIO_CS_PIN, RADIO_RST_PIN, RADIO_DIO0_PIN);
  if (!LoRa.begin(LoRa_frequency))
  {
    Serial.println("Starting LoRa failed!");
    while (1)
      ;
  }
}

bool handshake = false;

bool myTurn = true;

enum TURN
{
  SENDER,
  RECEIVER
};

TURN turn = TURN::SENDER;

void loop()
{

  switch (state)
  {
  case State::INIT:
    Serial.println("INIT");
    state = State::WAITING;
    break;
  case State::WAITING:
    Serial.println("WAITING");
    if (LoRa.parsePacket())
    {
      state = State::RECEIVING;
    }
    break;
  case State::RECEIVING:
    Serial.println("RECEIVING");
    onReceive(LoRa.parsePacket());
    state = State::SENDING;
    break;
  case State::SENDING:
    Serial.println("SENDING");
    sprintf(message, MESSAGE, randomBoardId, iteration);
    LoRa.beginPacket();
    LoRa.print(message);
    LoRa.endPacket();
    Serial.print("Sending: ");
    Serial.println(message);
    state = State::WAITING;
    break;
  default:
    Serial.println("UNKNOWN");
    break;
  }

  delay(100);
}